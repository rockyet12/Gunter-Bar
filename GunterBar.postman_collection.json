{
  "info": {
    "name": "Gunter Bar API Collection",
    "description": "Complete API collection for Gunter Bar management system - ASP.NET Core 9.0 REST API with JWT authentication",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0",
    "author": "Roque Rivas - ET12 Technical School"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "https://localhost:7221/api",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "refresh_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "drink_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "order_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "description": "User authentication endpoints - Register, Login, Refresh Token",
      "item": [
        {
          "name": "Register Customer",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"customer@gunterbar.com\",\n  \"password\": \"SecurePass123!\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"role\": \"Customer\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new customer user account"
          },
          "response": []
        },
        {
          "name": "Register Admin",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@gunterbar.com\",\n  \"password\": \"AdminPass123!\",\n  \"firstName\": \"Admin\",\n  \"lastName\": \"User\",\n  \"role\": \"Admin\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new admin user account"
          },
          "response": []
        },
        {
          "name": "Login Customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('jwt_token', response.accessToken);",
                  "    pm.collectionVariables.set('refresh_token', response.refreshToken);",
                  "    pm.collectionVariables.set('user_id', response.user.id);",
                  "    console.log('JWT Token saved:', response.accessToken.substring(0, 50) + '...');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"customer@gunterbar.com\",\n  \"password\": \"SecurePass123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with customer credentials and save JWT token"
          },
          "response": []
        },
        {
          "name": "Login Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('jwt_token', response.accessToken);",
                  "    pm.collectionVariables.set('refresh_token', response.refreshToken);",
                  "    pm.collectionVariables.set('user_id', response.user.id);",
                  "    console.log('Admin JWT Token saved:', response.accessToken.substring(0, 50) + '...');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@gunterbar.com\",\n  \"password\": \"AdminPass123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with admin credentials and save JWT token"
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('jwt_token', response.accessToken);",
                  "    pm.collectionVariables.set('refresh_token', response.refreshToken);",
                  "    console.log('Token refreshed successfully');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["auth", "refresh"]
            },
            "description": "Refresh the JWT access token using refresh token"
          },
          "response": []
        }
      ]
    },
    {
      "name": "User Management",
      "description": "User profile and administration endpoints",
      "item": [
        {
          "name": "Get User Profile",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/profile",
              "host": ["{{base_url}}"],
              "path": ["users", "profile"]
            },
            "description": "Get current authenticated user's profile information"
          },
          "response": []
        },
        {
          "name": "Update User Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Johnny\",\n  \"lastName\": \"Doe\",\n  \"email\": \"johnny@gunterbar.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/profile",
              "host": ["{{base_url}}"],
              "path": ["users", "profile"]
            },
            "description": "Update current user's profile information"
          },
          "response": []
        },
        {
          "name": "Get All Users (Admin)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users?page=1&pageSize=10",
              "host": ["{{base_url}}"],
              "path": ["users"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ]
            },
            "description": "Get paginated list of all users (Admin only)"
          },
          "response": []
        },
        {
          "name": "Get Users by Role (Admin)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users?role=Customer&page=1&pageSize=10",
              "host": ["{{base_url}}"],
              "path": ["users"],
              "query": [
                {
                  "key": "role",
                  "value": "Customer"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ]
            },
            "description": "Get users filtered by role (Admin only)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Drink Management",
      "description": "Drink catalog management endpoints",
      "item": [
        {
          "name": "Get All Drinks",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.items && response.items.length > 0) {",
                  "        pm.collectionVariables.set('drink_id', response.items[0].id);",
                  "        console.log('Drink ID saved:', response.items[0].id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/drinks?page=1&pageSize=10",
              "host": ["{{base_url}}"],
              "path": ["drinks"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ]
            },
            "description": "Get paginated list of all drinks"
          },
          "response": []
        },
        {
          "name": "Get Drinks by Category",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/drinks?category=Beer&page=1&pageSize=10",
              "host": ["{{base_url}}"],
              "path": ["drinks"],
              "query": [
                {
                  "key": "category",
                  "value": "Beer"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ]
            },
            "description": "Get drinks filtered by category"
          },
          "response": []
        },
        {
          "name": "Get Available Drinks Only",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/drinks?availableOnly=true&page=1&pageSize=10",
              "host": ["{{base_url}}"],
              "path": ["drinks"],
              "query": [
                {
                  "key": "availableOnly",
                  "value": "true"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ]
            },
            "description": "Get only available drinks"
          },
          "response": []
        },
        {
          "name": "Search Drinks",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/drinks?search=IPA&page=1&pageSize=10",
              "host": ["{{base_url}}"],
              "path": ["drinks"],
              "query": [
                {
                  "key": "search",
                  "value": "IPA"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ]
            },
            "description": "Search drinks by name or description"
          },
          "response": []
        },
        {
          "name": "Get Drink by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/drinks/{{drink_id}}",
              "host": ["{{base_url}}"],
              "path": ["drinks", "{{drink_id}}"]
            },
            "description": "Get detailed information of a specific drink"
          },
          "response": []
        },
        {
          "name": "Create Drink (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('drink_id', response.id);",
                  "    console.log('New drink created with ID:', response.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Gunter Special Lager\",\n  \"description\": \"Premium lager beer with unique Gunter flavor profile\",\n  \"price\": 6.50,\n  \"category\": \"Beer\",\n  \"isAvailable\": true,\n  \"imageUrl\": \"https://api.gunterbar.com/images/gunter-lager.jpg\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/drinks",
              "host": ["{{base_url}}"],
              "path": ["drinks"]
            },
            "description": "Create a new drink (Admin/Bartender only)"
          },
          "response": []
        },
        {
          "name": "Update Drink (Admin)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Gunter Premium Lager\",\n  \"description\": \"Updated premium lager beer with enhanced flavor\",\n  \"price\": 7.00,\n  \"category\": \"Beer\",\n  \"isAvailable\": true,\n  \"imageUrl\": \"https://api.gunterbar.com/images/gunter-premium-lager.jpg\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/drinks/{{drink_id}}",
              "host": ["{{base_url}}"],
              "path": ["drinks", "{{drink_id}}"]
            },
            "description": "Update an existing drink (Admin/Bartender only)"
          },
          "response": []
        },
        {
          "name": "Delete Drink (Admin)",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/drinks/{{drink_id}}",
              "host": ["{{base_url}}"],
              "path": ["drinks", "{{drink_id}}"]
            },
            "description": "Delete a drink (Admin only)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Cart Management",
      "description": "Shopping cart operations",
      "item": [
        {
          "name": "Get Cart",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/cart",
              "host": ["{{base_url}}"],
              "path": ["cart"]
            },
            "description": "Get current user's shopping cart"
          },
          "response": []
        },
        {
          "name": "Add Item to Cart",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"drinkId\": \"{{drink_id}}\",\n  \"quantity\": 2\n}"
            },
            "url": {
              "raw": "{{base_url}}/cart/items",
              "host": ["{{base_url}}"],
              "path": ["cart", "items"]
            },
            "description": "Add a drink item to the shopping cart"
          },
          "response": []
        },
        {
          "name": "Update Cart Item Quantity",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"quantity\": 3\n}"
            },
            "url": {
              "raw": "{{base_url}}/cart/items/{{drink_id}}",
              "host": ["{{base_url}}"],
              "path": ["cart", "items", "{{drink_id}}"]
            },
            "description": "Update the quantity of a specific item in the cart"
          },
          "response": []
        },
        {
          "name": "Remove Item from Cart",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/cart/items/{{drink_id}}",
              "host": ["{{base_url}}"],
              "path": ["cart", "items", "{{drink_id}}"]
            },
            "description": "Remove a specific item from the cart"
          },
          "response": []
        },
        {
          "name": "Clear Cart",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/cart",
              "host": ["{{base_url}}"],
              "path": ["cart"]
            },
            "description": "Remove all items from the shopping cart"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Order Management",
      "description": "Order creation and management",
      "item": [
        {
          "name": "Get User Orders",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.items && response.items.length > 0) {",
                  "        pm.collectionVariables.set('order_id', response.items[0].id);",
                  "        console.log('Order ID saved:', response.items[0].id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/orders?page=1&pageSize=10",
              "host": ["{{base_url}}"],
              "path": ["orders"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ]
            },
            "description": "Get current user's orders with pagination"
          },
          "response": []
        },
        {
          "name": "Get Order by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/orders/{{order_id}}",
              "host": ["{{base_url}}"],
              "path": ["orders", "{{order_id}}"]
            },
            "description": "Get detailed information of a specific order"
          },
          "response": []
        },
        {
          "name": "Create Order from Cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('order_id', response.id);",
                  "    console.log('New order created with ID:', response.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"specialInstructions\": \"Extra ice please, and make it quick!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/orders",
              "host": ["{{base_url}}"],
              "path": ["orders"]
            },
            "description": "Create a new order from current cart contents"
          },
          "response": []
        },
        {
          "name": "Update Order Status (Admin)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"InProgress\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/orders/{{order_id}}/status",
              "host": ["{{base_url}}"],
              "path": ["orders", "{{order_id}}", "status"]
            },
            "description": "Update order status (Admin/Bartender only)"
          },
          "response": []
        },
        {
          "name": "Get Orders by Status (Admin)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/orders?status=Pending&page=1&pageSize=10",
              "host": ["{{base_url}}"],
              "path": ["orders"],
              "query": [
                {
                  "key": "status",
                  "value": "Pending"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ]
            },
            "description": "Get orders filtered by status (Admin/Bartender)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Health & Monitoring",
      "description": "System health checks and monitoring endpoints",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/../health",
              "host": ["{{base_url}}"],
              "path": ["..", "health"]
            },
            "description": "Check overall system health status"
          },
          "response": []
        },
        {
          "name": "Swagger Documentation",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/../swagger",
              "host": ["{{base_url}}"],
              "path": ["..", "swagger"]
            },
            "description": "Access interactive API documentation"
          },
          "response": []
        },
        {
          "name": "OpenAPI Specification",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/../swagger/v1/swagger.json",
              "host": ["{{base_url}}"],
              "path": ["..", "swagger", "v1", "swagger.json"]
            },
            "description": "Download OpenAPI 3.0 specification"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "// Automatically set base URL for different environments",
          "const environment = pm.environment.name;",
          "",
          "if (environment === 'Development') {",
          "    pm.collectionVariables.set('base_url', 'https://localhost:7221/api');",
          "} else if (environment === 'Staging') {",
          "    pm.collectionVariables.set('base_url', 'https://api-staging.gunterbar.com/api');",
          "} else if (environment === 'Production') {",
          "    pm.collectionVariables.set('base_url', 'https://api.gunterbar.com/api');",
          "}",
          "",
          "// Log current configuration",
          "console.log('Environment:', environment);",
          "console.log('Base URL:', pm.collectionVariables.get('base_url'));"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "// Common response validations",
          "",
          "pm.test('Status code is not 5xx', function () {",
          "    pm.expect(pm.response.code).to.not.be.oneOf([500, 501, 502, 503, 504, 505]);",
          "});",
          "",
          "pm.test('Response time is less than 2000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});",
          "",
          "if (pm.response.code === 401) {",
          "    console.warn('Authentication failed - token may be expired');",
          "}",
          "",
          "if (pm.response.code === 403) {",
          "    console.warn('Access forbidden - insufficient permissions');",
          "}",
          "",
          "// Log response details for debugging",
          "console.log('Response Status:', pm.response.code);",
          "console.log('Response Time:', pm.response.responseTime + 'ms');"
        ]
      }
    }
  ]
}
